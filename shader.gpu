

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMat, lightMat;
varying vec3 normalInterp;
varying vec3 vertPos;
uniform bool isLighted;

void main() {
    normalInterp = vec3(normalMat * vec4(normal, 0.0));
    if(isLighted){
        gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    }
    else{
        gl_Position = lightMat * vec4(vertex,1.0);
    }
    
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalInterp;
varying vec3 vertPos;
uniform vec3 lightDirection;
uniform bool isLighted;

uniform vec3 diffuseColor;

void main() {
    vec3 N = normalize(normalInterp);
    vec3 lightDir = lightDirection;

    // Lambert's cosine law
    float lambertian = max(dot(N, lightDir), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-lightDir, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 10.0);
    }
    vec3 ambientColor = 0.2*diffuseColor;
    vec3 specularColor=vec3(1);
    if(isLighted){
        gl_FragColor = vec4(ambientColor + lambertian * diffuseColor + specular * specularColor, 1.0);
    }
    else{
        gl_FragColor = color;
    }
    
}`;